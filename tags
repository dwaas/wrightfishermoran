!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARGS	Makefile	/^ARGS= .$/;"	m
Allele	Gene.h	/^		typedef unsigned Allele; \/\/ no negative numbers allowed$/;"	t	class:Gene
CC	Makefile	/^CC=g++$/;"	m
DEBUGFLAGS	Makefile	/^DEBUGFLAGS= -O0 -g $(FLAGS)$/;"	m
DEPS	Makefile	/^DEPS= Gene.h Population.h$/;"	m
EXE	Makefile	/^EXE= WFM$/;"	m
Gene	Gene.h	/^		Gene ( const Allele &other )  : m_allele( other % kNumAlleles) {}; \/\/ kindof copy constructor$/;"	f	class:Gene
Gene	Gene.h	/^		Gene ( const Gene &other ) : m_allele(other.m_allele) {};   \/* copy constructor *\/$/;"	f	class:Gene
Gene	Gene.h	/^		Gene () : m_allele(rand() % kNumAlleles) {};    \/* constructor      *\/$/;"	f	class:Gene
Gene	Gene.h	/^class Gene$/;"	c
GeneVec	Population.h	/^typedef std::vector < Gene > GeneVec;$/;"	t
Gene_INC	Gene.h	20;"	d
OBJS	Makefile	/^OBJS=main.o Gene.o Population.o$/;"	m
Population	Population.cpp	/^Population::Population ( const Population &other )$/;"	f	class:Population
Population	Population.cpp	/^Population::Population (const unsigned kInitialNumMin, const unsigned kInitialNumMax, $/;"	f	class:Population
Population	Population.h	/^class Population$/;"	c
Population_INC	Population.h	20;"	d
ROOTCFLAGS	Makefile	/^ROOTCFLAGS= `root-config --cflags`$/;"	m
ROOTLIBS	Makefile	/^ROOTLIBS= `root-config --libs`$/;"	m
RUNFLAGS	Makefile	/^RUNFLAGS= -O3 $(FLAGS)$/;"	m
TwoVarFunc	Population.h	/^		typedef	std::vector < std::vector< double > > TwoVarFunc;$/;"	t	class:Population
allele	Gene.h	/^		Allele allele() const{return m_allele; }$/;"	f	class:Gene
debug	Makefile	/^debug=0$/;"	m
gene_vec	Population.h	/^		GeneVec gene_vec() const {return m_gene_vec; }$/;"	f	class:Population
kNumAlleles	Gene.h	/^		static const unsigned kNumAlleles = 2;$/;"	m	class:Gene
m_allele	Gene.h	/^	Allele m_allele;$/;"	m	class:Gene
m_gene_vec	Population.h	/^		GeneVec m_gene_vec;$/;"	m	class:Population
m_probability_function	Population.h	/^		TwoVarFunc m_probability_function;$/;"	m	class:Population
main	main.cpp	/^int main(int argc,char* argv[])$/;"	f
operator !=	Gene.h	/^	friend bool operator != (const Gene &a, const Gene &b){ return (a.m_allele != b.m_allele); };$/;"	f	class:Gene
operator <<	Gene.cpp	/^operator << ( std::ostream &os, const Gene &obj ) $/;"	f
operator =	Gene.cpp	/^Gene::operator = ( const Gene &other )$/;"	f	class:Gene
operator =	Population.cpp	/^Population::operator = ( const Population &other )$/;"	f	class:Population
operator ==	Gene.h	/^	friend bool operator == (const Gene &a, const Gene &b){ return (a.m_allele == b.m_allele); };$/;"	f	class:Gene
probability_function	Population.h	/^		TwoVarFunc probability_function(){return m_probability_function; }$/;"	f	class:Population
~Gene	Gene.cpp	/^Gene::~Gene ()$/;"	f	class:Gene
~Population	Population.cpp	/^Population::~Population ()$/;"	f	class:Population
